/*
 * Copyright 2009 Christopher J. Stehno
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.stehno.codeperks.io;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.apache.commons.io.IOUtils;

/**
 * Provides reusable template methods for reading and writing data with proper
 * stream management.
 *
 * @author Christopher J. Stehno (chris@stehno.com)
 */
public final class IoTemplate {

	/**
	 * Negates instantiation.
	 */
	private IoTemplate(){}

	/**
	 * Executes the given callback to write data to the writer generated by the given factory.
	 *
	 * @param <W> the Writer sub-type being used
	 * @param wf the WriterFactory
	 * @param wc the WriterCallback
	 * @throws IOException if there is a problem writing the data
	 */
	public static final <W extends Writer> void  write(final WriterFactory<W> wf, final WriterCallback<W> wc) throws IOException {
		W w = null;
		try {
			w = wf.writer();
			wc.write(w);
		} finally {
			IOUtils.closeQuietly(w);
		}
	}

	/**
	 * Executes the given callback to write data to the provided writer.
	 *
	 * @param <W> type of Writer
	 * @param writer the writer
	 * @param wc the WriterCallback instance
	 * @throws IOException if there is a problem writing the data
	 */
	public static final <W extends Writer> void write(final W writer, final WriterCallback<W> wc) throws IOException {
		write(
				new WriterFactory<W>(){
					@Override
					public W writer() throws IOException { return writer; }
				},
				wc
		);
	}

	/**
	 * Executes the given callback to read data from the reader generated by the given factory.
	 *
	 * @param <R> the Reader sub-type being used
	 * @param rf the ReaderFactory
	 * @param rc the ReaderCallback
	 * @throws IOException if there is a problem reading the data
	 */
	public static final <R extends Reader> void read(final ReaderFactory<R> rf, final ReaderCallback<R> rc) throws IOException {
		R r = null;
		try {
			r = rf.reader();
			rc.read(r);
		} finally {
			IOUtils.closeQuietly(r);
		}
	}

	/**
	 * Executes the given callback to reader data from the provided reader.
	 *
	 * @param <R> type of Reader
	 * @param reader the reader
	 * @param rc the ReaderCallback instance
	 * @throws IOException if there is a problem writing the data
	 */
	public static final <R extends Reader> void read(final R reader, final ReaderCallback<R> rc) throws IOException {
		read(
				new ReaderFactory<R>() {
					@Override
					public R reader() throws IOException {return reader;}
				},
				rc
		);
	}

	/**
	 * Executes the given callback to input data to the InputStream generated by the given factory.
	 *
	 * @param <I> the InputStream sub-type being used
	 * @param isf the InputStreamFactory
	 * @param isc the InputStreamCallback
	 * @throws IOException if there is a problem creating or using the InputStream
	 */
	public static final <I extends InputStream> void  input(final InputStreamFactory<I> isf, final InputStreamCallback<I> isc) throws IOException {
		I in = null;
		try {
			in = isf.inputStream();
			isc.input(in);
		} finally {
			IOUtils.closeQuietly(in);
		}
	}

	/**
	 *
	 * @param <I> type of InputStream
	 * @param input the input stream
	 * @param isc the InputStreamCallback
	 * @throws IOException if there is a problem
	 */
	public static final <I extends InputStream> void  input(final I input, final InputStreamCallback<I> isc) throws IOException {
		input(
				new InputStreamFactory<I>() {
					@Override
					public I inputStream() throws IOException { return input; }
				},
				isc
		);
	}

	/**
	 *	Executes the given callback to output data from the OutputStream generated by the given factory.
	 *
	 * @param <O> the OutputStream sub-type being used
	 * @param osf the OutputStreamFactory
	 * @param osc the OutputStreamCallbac
	 * @throws IOException if there is a problem using the OutputStream
	 */
	public static final <O extends OutputStream> void output(final OutputStreamFactory<O> osf, final OutputStreamCallback<O> osc) throws IOException {
		O out = null;
		try {
			out = osf.outputStream();
			osc.output(out);
		} finally {
			IOUtils.closeQuietly(out);
		}
	}

	/**
	 *
	 * @param <O> type of OutputStream
	 * @param output the output stream
	 * @param osc the OutputStreamCallback
	 * @throws IOException if there is a problem
	 */
	public static final <O extends OutputStream> void output(final O output, final OutputStreamCallback<O> osc) throws IOException {
		output(
				new OutputStreamFactory<O>() {
					@Override
					public O outputStream() throws IOException { return output; }
				},
				osc
		);
	}
}
